// <auto-generated>
// added auto-generated to suppress the warning we will visit this part later.
// </auto-generated>
using BlazorInputFile;
using CDNApplication.Data.DTO.MTAPI;
using CDNApplication.Models.PageModels;
using Microsoft.AspNetCore.WebUtilities;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;

namespace CDNApplication.Data.Services
{
    public class MtoaFileService
    {
        private readonly string baseURL = "https://wwwappstest.tc.gc.ca/Saf-Sec-Sur/13/MTAPI-INT/api/v1/"; //This is for Dev only works within organizational network.

        private string api_key;
        private string jwt;

        public MtoaFileService(AzureKeyVaultService azureKeyVaultService)
        {
            api_key = azureKeyVaultService.GetSecretByName("MtoaApiKey");

            jwt = azureKeyVaultService.GetSecretByName("MtoaJwt");
        }


         /// <summary> 
            ///following method uploads files after getting files from pageModel.
            // this method returns a list of attachment IDs after storing files on MTOA storage. These IDs can be used to retrieving those file at later time.
            // if there is a null value in the List<int>, it means that the corresponding file was not uploaded successfully. Like for a virus issue.
        /// </summary>
        /// <param name="pageModel"></param>
        /// <returns></returns>
        public  List<int> UploadFilesInPageModelAsync(UploadDocumentPageModel pageModel)
        {
            List<int> fileAttachmentIDs = null;
            // Following is a temporary static serviceRequestId.
            // TODO: serviceRequestId needs to be created at runtime through MTOA Add service request.
            int serviceRequestId = 13844; // this is used for Dev

            var fileAttachments = this.GetFileAttachmentsFromPageModelAsync(pageModel, serviceRequestId);

            if (fileAttachments.Count > 0)
            {
                fileAttachmentIDs = new List<int>();
                foreach (var file in fileAttachments)
                {
                    var storedFileAttachment = this.UploadFile(serviceRequestId, file, this.api_key, this.jwt, this.baseURL); //Try logging or adding to the Azure telemetry
                    fileAttachmentIDs.Add( storedFileAttachment.Id);
                }
            }

            return fileAttachmentIDs;
        }

        //TODO: there is a bit of a problem to investigage to see how the byte[] needs to be retrieved from uploaded file through 'BlazorInputFile'
        private List<FileAttachment> GetFileAttachmentsFromPageModelAsync(UploadDocumentPageModel pageModel, int serviceRequestId)
        {
            List<FileAttachment> attachments = null;

            if (pageModel.UploadedFiles.Count > 0)
            {
                attachments = new List<FileAttachment>();

                foreach (var file in pageModel.UploadedFiles)
                {
                    Stream streamData =(Stream) file.SelectedFile.Data;
                    int byteSize = (int)streamData.Length;
                    byte[] byteData= new byte[byteSize];

                    streamData.ReadAsync(byteData, 0, (int)streamData.Length, System.Threading.CancellationToken.None).Wait(100);

                    var fileName = file.SelectedFile.Name;

                    var fileAttachment = new FileAttachment
                    {
                        ContentType = "testing",
                        Data = byteData,
                        Name = "FirstName.txt",
                        ServiceRequestId = serviceRequestId,
                        Size = byteData.Length
                    };

                    attachments.Add(fileAttachment);
                }
            }

            return attachments;
        }


        public Task<FileAttachment> UploadSingleFileFromPage(UploadedFile file)
        {
            Task<FileAttachment> uploadedFileAttachment = null;
            int serviceRequestId = 13844; // this is used for Dev

            if(file != null)
            {
                var selectedFile = file.SelectedFile;

                var streamData = selectedFile.Data;
                byte[] byteData; // we need to get byte[] from memory stream which came from file.SelectedFile.Data

                using (var memoryStream = new MemoryStream())
                {
                    streamData.CopyTo(memoryStream);
                    byteData = memoryStream.ToArray();
                }


                var attachment = new FileAttachment
                                        {
                                            ContentType = selectedFile.Type,
                                            Data = byteData,
                                            Name = selectedFile.Name,
                                            ServiceRequestId = serviceRequestId,
                                            Size = byteData.Length
                                        };

                uploadedFileAttachment = this.UploadFile(serviceRequestId, attachment, api_key, jwt, baseURL);

            }


            return uploadedFileAttachment;

        }

        //TODO: the following methods needs to be hooked up to the Data storage api project to save the FileAttachmentId
        public async Task<FileAttachment> UploadFile(int serviceRequestId, FileAttachment fileAttachment, string apiKey, string jwt, string baseURL)
        {
            FileAttachment uploadedAttachment = null;

            using (var client = new HttpClient())
            {
                client.DefaultRequestHeaders.TryAddWithoutValidation("Accept", "application/json");
                client.DefaultRequestHeaders.TryAddWithoutValidation("app-jwt", jwt);
                client.DefaultRequestHeaders.TryAddWithoutValidation("api-key", apiKey);

                client.BaseAddress = new Uri(baseURL);

                ByteArrayContent content = new ByteArrayContent(fileAttachment.Data);
                content.Headers.ContentType = new MediaTypeHeaderValue("application/octet-stream");

                string subUrl = "file-attachments?serviceRequestId=" + serviceRequestId +
                                "&filename=" + fileAttachment.Name +
                                "&contentType=application/octet-stream&size=" + fileAttachment.Size;

                try
                {
                    var response = await client.PostAsync(subUrl, (HttpContent)content);
                    FileAttachment uploadedFileAttachment;

                    if (response.StatusCode == HttpStatusCode.OK)
                    {
                        uploadedFileAttachment = await (Task<FileAttachment>)HttpContentExtensions.ReadAsAsync<FileAttachment>(response.Content);

                    }

                    if (response.StatusCode == HttpStatusCode.BadRequest)
                    {
                        uploadedFileAttachment = await (Task<FileAttachment>)HttpContentExtensions.ReadAsAsync<FileAttachment>(response.Content);
                        uploadedFileAttachment.Name = fileAttachment.Name;
                        uploadedFileAttachment.Id = -1;
                    }


                    response.EnsureSuccessStatusCode();
                    var status = response.StatusCode;
                }
                catch (Exception ex)
                {
                    Debug.WriteLine(ex.Message);
                    Debug.WriteLine(ex.StackTrace);
                }

                return uploadedAttachment;
            }


        }
    
    }
}
