@page "/upload"
@page "/{LanguageCode}/upload"

@inject IStringLocalizer<UploadDocument> PageLocalizer

@using BlazorInputFile
@using CDNApplication.Data.Entity
@using System.ComponentModel.DataAnnotations
@inherits BaseComponent

<h1>@PageLocalizer["PageTitle"]</h1>

<p>@PageLocalizer["PageDescription"]</p>

<EditForm Model="@model" OnValidSubmit="HandleValidSubmit">
    <ValidationSummary />
    <DataAnnotationsValidator />

    <div class="form-group">
        <div class="form-control-wrapper">
            <label class="form-control-label required" for="CDN-Number">
                @PageLocalizer["CDNLabel"] <strong class="required">(required)</strong>
            </label>
            <InputText class="form-control" @bind-Value="@model.CdnNumber" id="CDN-Certification-Selection" />
            <ValidationMessage For="() => model.CdnNumber" />
        </div>
    </div>

    <div class="form-group">
        <div class="form-control-wrapper">
            <label class="form-control-label required" for="CDN-Certification-Selection">
                @PageLocalizer["SelectCertificateLabel"] <strong class="required">(required)</strong>
            </label>
            <TSelect Items="@certificateTypes" FieldName="EnglishName" OnSelectChangeFromChildEvent="SelectionChanged"></TSelect>
            <ValidationMessage For="() => model.CertificationSelection" />
        </div>
    </div>

    <section class="panel panel-primary">
        <header class="panel-heading">
            <h5 class="panel-title">@PageLocalizer["AddYourDocumentsPanel"]</h5>
        </header>
        <div class="panel-body">
            <div class="form-group">
                <label class="form-control-label" for="CDN-File-Description">@PageLocalizer["FileDescription"]</label>
                <InputText class="form-control" @bind-Value="@model.FileDescription" id="CDN-File-Description" />

                <label for="Document">@PageLocalizer["SelectFile"]</label>
                <InputFile id="Document" class="form-control" OnChange="HandleFileSelected" />


                @for (var i = 0; i < files.Count; i++)
                {
                    var index = i;
                    <p>
                        @string.Format(PageLocalizer["FileUploadedSuccessText"], files[i].SelectedFile.Name) | @PageLocalizer["Description"]: @files[i].Description

                        <button class="btn btn-danger" type="button" @onclick="e => RemoveFile(index)">X</button>
                    </p>
                }
                <br />
                <button id="add_another_file" type="button" class=" btn" onclick="trigerInputFileButton()">Add another file </button>

            </div>
        </div>
    </section>

    <button class=" btn btn-primary" type="submit">
        @PageLocalizer["SubmitButton"]
    </button>

</EditForm>

@code {

    private IFileListEntry[] selectedFiles = new IFileListEntry[0];

    private List<UploadedFile> files = new List<UploadedFile>();

    private readonly Model model = new Model();

    private UploadedFileStatus fileUploaded { get; set; }

    private int confirmation { get; set; }


    private List<CertificateType> certificateTypes;


    private class UploadedFile
    {
        public IFileListEntry SelectedFile { get; set; }

        public string Description { get; set; }
    }


    private enum UploadedFileStatus
    {
        DEFAULT,
        SUCCESS,
        FAIL
    }

    private class Model
    {

        [RegularExpression("^[a-zA-Z0-9]*$", ErrorMessage = "Only alphanumeric characters allowed.")]
        [Required(ErrorMessage = "The Candidate Document Number is a required field.")]
        public string CdnNumber { get; set; }

        [Required(ErrorMessage = "The Certificate Type is a required field.")]
        public string CertificationSelection { get; set; }

        public List<UploadedFile> UserFiles { get; set; }

        public string FileDescription { get; set; } = String.Empty;

        public override string ToString()
        {
            return string.Format("{1}{0} {2}{0} {3}{0}",
                Environment.NewLine,
                CdnNumber,
                CertificationSelection,
                UserFiles);
        }
    }

    private void HandleValidSubmit()
    {
        Console.WriteLine("HandleValidSubmit");
        Console.WriteLine(model);
        NavigationManager.NavigateTo($"{NavigationManager.BaseUri}{LanguageCode}/confirmation/{confirmation}");
    }

    async void HandleFileSelected(IFileListEntry[] files)
    {
        selectedFiles = files;

        foreach (var item in files)
        {
            this.files.Add(new UploadedFile { SelectedFile = item, Description = model.FileDescription });

            model.FileDescription = string.Empty;
        }

        fileUploaded = UploadedFileStatus.DEFAULT;

        StateHasChanged();

        await Task.Delay(100);

        model.UserFiles = this.files;
        // Upload the file to the root directory

        //var result = await azureBlobService.UploadMultipleFilesAsync(files);

        //fileUploaded = result.Count == files.Length ? FileUploaded.SUCCESS : FileUploaded.FAIL;
    }

    private void SelectionChanged(ChangeEventArgs e)
    {
        model.CertificationSelection = e.Value.ToString();
    }

    void RemoveFile(int index)
    {
        model.UserFiles.RemoveAt(index);

        StateHasChanged();
    }

    protected override void OnInitialized() // = On Page Load
    {
        base.OnInitialized();

        var random = new Random();

        confirmation = random.Next(100000, 9999999);

        certificateTypes = CertificateType.GetAllCertificateTypes();
    }

}
