@page "/upload"
@page "/{LanguageCode}/upload"

@inject IStringLocalizer<UploadDocument> PageLocalizer

@using BlazorInputFile
@using CDNApplication.Data.Entity
@using System.ComponentModel.DataAnnotations
@inherits BaseComponent

<h1>@PageLocalizer["PageTitle"]</h1>

<p>@PageLocalizer["PageDescription"]</p>

<EditForm Model="@_model" OnValidSubmit="HandleValidSubmit">
    <ValidationSummary />
    <DataAnnotationsValidator />

    <div class="form-group">
        <div class="form-control-wrapper">
            <label class="form-control-label required" for="@nameof(_model.CdnNumber)">
                @PageLocalizer["CDNLabel"] <strong class="required">(required)</strong>
            </label>
            <InputText class="form-control" @bind-Value="@_model.CdnNumber" id="@nameof(_model.CdnNumber)" />
            <ValidationMessage For="() => _model.CdnNumber" />
        </div>
    </div>

    <div class="form-group">
        <div class="form-control-wrapper">
            <label class="form-control-label required">
                @PageLocalizer["SelectCertificateLabel"] <strong class="required">(required)</strong>
            </label>
            <TSelect Items="@_certificateTypes" FieldName="EnglishName" OnSelectChangeFromChildEvent="CertificateTypeSelectionChanged" />
            <ValidationMessage For="() => _model.CertificateType" />
        </div>
    </div>

    <section class="panel panel-primary">
        <header class="panel-heading">
            <h5 class="panel-title">@PageLocalizer["AddYourDocumentsPanelHeading"]</h5>
        </header>
        <div class="panel-body">
            <div class="form-group">
                <label class="form-control-label" for="@nameof(_model.FileDescription)">@PageLocalizer["FileDescriptionLabel"]</label>
                <InputText class="form-control" @bind-Value="@_model.FileDescription" id="@nameof(_model.FileDescription)" />

                <label for="upload-file">@PageLocalizer["SelectFileLabel"]</label>
                <InputFile class="form-control" OnChange="HandleFileSelected"  id="upload-file"/>
                <ValidationMessage For="() => _model.UploadedFiles" />

                @for (var i = 0; i < (_model.UploadedFiles?.Count ?? 0); i++)
                {
                    var index = i;
                    <p>
                        @string.Format(PageLocalizer["FileUploadedSuccessText"], _model.UploadedFiles?[i].SelectedFile.Name) | @PageLocalizer["DescriptionText"]: @_model.UploadedFiles?[i].Description

                        <button class="btn btn-danger" type="button" @onclick="e => RemoveFile(index)">X</button>
                    </p>
                }
                <br />
                <button id="add_another_file" type="button" class=" btn" onclick="trigerInputFileButton()">@PageLocalizer["AddAnotherFileText"]</button>

            </div>
        </div>
    </section>

    <button class=" btn btn-primary" type="submit">
        @PageLocalizer["SubmitButton"]
    </button>

</EditForm>

@code {

    private readonly UploadDocumentsModel _model = new UploadDocumentsModel();

    private int _confirmationGuid;

    private List<CertificateType> _certificateTypes;

    private class UploadedFile
    {
        public IFileListEntry SelectedFile { get; set; }

        public string Description { get; set; }
    }

    private class UploadDocumentsModel
    {

        [Range(1, 999999, ErrorMessage = "CDN must be a valid 6-digit number.")]
        [Required(ErrorMessage = "The Candidate Document Number is a required field.")]
        public string CdnNumber { get; set; }

        [Required(ErrorMessage = "The Certificate Type is a required field.")]
        public string CertificateType { get; set; }

        [Required(ErrorMessage = "Where yo files be at dawg?")]
        public List<UploadedFile> UploadedFiles { get; set; }

        public string FileDescription { get; set; } = String.Empty;

        public override string ToString()
        {
            return string.Format("{1}{0} {2}{0} {3}{0}",
                Environment.NewLine,
                CdnNumber,
                CertificateType,
                UploadedFiles);
        }
    }

    private void HandleValidSubmit()
    {
        Console.WriteLine("HandleValidSubmit");
        Console.WriteLine(_model);
        NavigationManager.NavigateTo($"{NavigationManager.BaseUri}{LanguageCode}/confirmation/{_confirmationGuid}");
    }

    async void HandleFileSelected(IFileListEntry[] files)
    {
        _model.UploadedFiles ??= new List<UploadedFile>();

        foreach (var item in files)
        {
            _model.UploadedFiles.Add(new UploadedFile { SelectedFile = item, Description = _model.FileDescription });

            _model.FileDescription = string.Empty;
        }

        StateHasChanged();

        await Task.Delay(100);
    }

    private void CertificateTypeSelectionChanged(ChangeEventArgs e)
    {
        _model.CertificateType = e.Value.ToString();
    }

    void RemoveFile(int index)
    {
        _model.UploadedFiles.RemoveAt(index);

        if (_model.UploadedFiles.Count == 0)
            _model.UploadedFiles = null;

        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _confirmationGuid = new Random().Next(100000, 9999999);

        _certificateTypes = CertificateType.GetAllCertificateTypes();
    }

}
