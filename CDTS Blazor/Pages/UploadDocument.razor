@page "/upload"
@page "/{LanguageCode}/upload"

@inject IStringLocalizer<UploadDocument> PageLocalizer
@inject IStringLocalizer<CDNApplication.Resources.Pages.Common> CommonPageLocalizer
@inject Utilities.SessionState state

@using BlazorInputFile
@using CDNApplication.Data.Entity
@using CDNApplication.Models.PageModels
@inherits BaseComponent

<h1>@PageLocalizer["PageTitle"]</h1>

<p>@PageLocalizer["PageDescription"]</p>

<EditForm Model="@_model" OnValidSubmit="HandleValidSubmit">
    <FluentValidationValidator />
    <ValidationSummary />

    <div class="form-group">
        <div class="form-control-wrapper">
            <label class="form-control-label required" for="@nameof(_model.CdnNumber)">
                @PageLocalizer["CDNLabel"] <strong class="required">(required)</strong>
            </label>
            <InputText class="form-control" @bind-Value="@_model.CdnNumber" id="@nameof(_model.CdnNumber)" />
            <ValidationMessage For="() => _model.CdnNumber" />
        </div>
    </div>

    <div class="form-group">
        <div class="form-control-wrapper">
            <label class="form-control-label required">
                @PageLocalizer["SelectCertificateLabel"] <strong class="required">(required)</strong>
            </label>
            <TSelect Items="@_certificateTypes" FieldName="EnglishName" OnSelectChangeFromChildEvent="CertificateTypeSelectionChanged" />
            <ValidationMessage For="() => _model.CertificateType" />
        </div>
    </div>

    <section class="panel panel-primary">
        <header class="panel-heading">
            <h5 class="panel-title">@PageLocalizer["AddYourDocumentsPanelHeading"]</h5>
        </header>
        <div class="panel-body">
            <div class="form-group">
                <label class="form-control-label" for="@nameof(_model.FileDescription)">@PageLocalizer["FileDescriptionLabel"]</label>
                <InputText class="form-control" @bind-Value="@_model.FileDescription" id="@nameof(_model.FileDescription)" />

                <label for="upload-file">@PageLocalizer["SelectFileLabel"]</label>
                <InputFile class="form-control" OnChange="HandleFileSelected" id="upload-file" />
                <ValidationMessage For="() => _model.UploadedFiles" />

                @for (var i = 0; i < (_model.UploadedFiles?.Count ?? 0); i++)
                {
                    var index = i;
                    <p>
                        @string.Format(PageLocalizer["FileUploadedSuccessText"], _model.UploadedFiles?[i].SelectedFile.Name) | @PageLocalizer["DescriptionText"]: @_model.UploadedFiles?[i].Description

                        <button class="btn btn-danger" type="button" @onclick="e => RemoveFile(index)">X</button>
                    </p>
                }
                <br />
                <button id="add_another_file" type="button" class=" btn" onclick="trigerInputFileButton()">@PageLocalizer["AddAnotherFileText"]</button>

            </div>
        </div>
    </section>

    <button class=" btn btn-primary">
        @CommonPageLocalizer["Next"]
    </button>

</EditForm>

@code {

    private List<CertificateType> _certificateTypes = new List<CertificateType>();

    private UploadDocumentPageModel _model = new UploadDocumentPageModel();

    private void HandleValidSubmit()
    {

        state.UploadDocumentPage = _model;

        Console.WriteLine(_model);
        NavigationManager.NavigateTo($"{NavigationManager.BaseUri}{LanguageCode}/review");

    }

    async void HandleFileSelected(IFileListEntry[] files)
    {
        
        if (string.IsNullOrWhiteSpace(_model.FileDescription))
        {
            return;
        }

        foreach (var item in files)
        {
            _model.UploadedFiles.Add(new UploadedFile { SelectedFile = item, Description = _model.FileDescription });

            _model.FileDescription = string.Empty;
        }

        StateHasChanged();

        await Task.Delay(100);
    }

    private void CertificateTypeSelectionChanged(ChangeEventArgs e)
    {
        _model.CertificateType = e.Value.ToString();
    }

    void RemoveFile(int index)
    {
        _model.UploadedFiles.RemoveAt(index);

        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (state.UploadDocumentPage != null)
        {
            _model = state.UploadDocumentPage;

            StateHasChanged();
        }

        _certificateTypes = CertificateType.GetAllCertificateTypes();
    }

}
