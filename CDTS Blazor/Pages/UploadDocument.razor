@page "/upload"
@page "/{LanguageCode}/upload"
@using CDNApplication.Data.Services;
@using BlazorInputFile;
@using CDNApplication.Data.Entity;

@*@inject IAzureBlobService azureBlobService;*@

@using Data.Resources;
@using System.ComponentModel.DataAnnotations;

@using Data;
@using CDNApplication.TCComponents;
@inject IStringLocalizer<Pages.UploadDocument> pageLocalizer

@inherits BaseComponent

<h1>@pageLocalizer["PageTitle"]</h1>
<p>@pageLocalizer["PageDescription"]</p>

<EditForm Model="@model" OnValidSubmit="HandleValidSubmit">
    <ValidationSummary />
    <DataAnnotationsValidator />

    <div class="form-group">
        <div class="form-control-wrapper">
            <label class="form-control-label" for="CDN-Number">@pageLocalizer["CDNLabel"]</label>
            <InputText class="form-control" @bind-Value="@model.CdnNumber" id="CDN-Certification-Selection" />
        </div>
    </div>

    <div class="form-group">
        <div class="form-control-wrapper">
            <label class="form-control-label" for="CDN-Certification-Selection">@pageLocalizer["SelectCertificateLabel"]</label>
            <TSelect Items="@certificateTypes" FieldName="EnglishName" OnSelectChangeFromChildEvent="SelectionChanged"></TSelect>
        </div>
    </div>

    <section class="panel panel-primary">
        <header class="panel-heading">
            <h5 class="panel-title">@pageLocalizer["AddYourDocumentsPanel"]</h5>
        </header>
        <div class="panel-body">
            <div class="form-group">
                <label class="form-control-label" for="CDN-File-Description">@pageLocalizer["FileDescription"]</label>
                <InputText class="form-control" @bind-Value="@model.FileDescription" id="CDN-File-Description" />

                <label for="Document">@pageLocalizer["SelectFile"]</label>
                <InputFile id="Document" class="form-control" OnChange="HandleFileSelected" />

                @for (int i = 0; i < files.Count; i++)
                {
                    int index = i;
                    <p>
                        @string.Format(@pageLocalizer["FileUploadedSuccessText"], files[i].SelectedFile.Name) | @pageLocalizer["Description"]: @files[i].Description

                        <button class="btn btn-danger" type="button" @onclick="@(e => RemoveFile(index))">X</button>
                    </p>
                }

            </div>
        </div>
    </section>

    <button class=" btn btn-primary" type="submit">
        @pageLocalizer["SubmitButton"]
    </button>

</EditForm>

@code {

    public IFileListEntry[] selectedFiles = new IFileListEntry[0];

    public List<UploadedFile> files = new List<UploadedFile>();

    private Model model = new Model();

    public FileUploaded fileUploaded { get; set; }

    public int confirmation { get; set; }


    public List<CertificateType> certificateTypes;


    public class UploadedFile
    {

        public IFileListEntry SelectedFile { get; set; }

        public string Description { get; set; }

    }


    public enum FileUploaded
    {
        DEFAULT,
        SUCCESS,
        FAIL,
    }

    public class Model
    {
        [StringLength(6)]
        [Range(1, 999999)]
        [Required]
        public string CdnNumber { get; set; }

        [Required]
        public string CertificationSelection { get; set; }

        public List<UploadedFile> UserFiles { get; set; }

        [Required]
        public string FileDescription { get; set; } = String.Empty;

        public override string ToString()
        {
            return string.Format("{1}{0} {2}{0} {3}{0}",
                System.Environment.NewLine,
                this.CdnNumber,
                this.CertificationSelection,
                this.UserFiles);
        }
    }

    private void HandleValidSubmit()
    {
        Console.WriteLine("OnValidSubmit");
        Console.WriteLine(model);
        this.NavigationManager.NavigateTo($"{this.NavigationManager.BaseUri}{LanguageCode}/confirmation/{confirmation}");
    }

    async void HandleFileSelected(IFileListEntry[] files)
    {
        selectedFiles = files;

        foreach (var item in files)
        {
            this.files.Add(new UploadedFile { SelectedFile = item, Description = model.FileDescription });

            model.FileDescription = string.Empty;
        }

        fileUploaded = FileUploaded.DEFAULT;

        StateHasChanged();

        await Task.Delay(100);

        model.UserFiles = this.files;
        // Upload the file to the root directory

        //var result = await azureBlobService.UploadMultipleFilesAsync(files);

        //fileUploaded = result.Count == files.Length ? FileUploaded.SUCCESS : FileUploaded.FAIL;

    }

    private void SelectionChanged(ChangeEventArgs e)
    {
        model.CertificationSelection = e.Value.ToString();
    }

    void RemoveFile(int index)
    {
        model.UserFiles.RemoveAt(index);

        StateHasChanged();
    }

    protected override void OnInitialized() // = On Page Load
    {
        base.OnInitialized();

        Random random = new Random();

        confirmation = random.Next(100000, 9999999);

        certificateTypes = CertificateType.GetAllCertificateTypes();

    }

}
