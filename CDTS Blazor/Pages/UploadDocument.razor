@page "/upload"
@page "/{LanguageCode}/upload"

@inject IJSRuntime JSRuntime;
@inject IStringLocalizer<Common> CommonLocalizer
@inject IStringLocalizer<UploadDocument> PageLocalizer
@inject IStringLocalizer<Common> PageCommonLocalizer
@inject Services.UploadDocumentsStepper UploadDocumentsStepper
@inject Utilities.SessionState state
@inject Data.Services.MtoaFileService fileService

@using BlazorInputFile
@using CDNApplication.Data
@using CDNApplication.Data.Entity
@using CDNApplication.Models.PageModels
@using CDNApplication.TCComponents.Stepper
@inherits BaseComponent

<StepperComponent Stepper="@UploadDocumentsStepper.Stepper" />

<h1>@PageLocalizer["PageTitle"]</h1>

<EditForm Model="@model" OnValidSubmit="HandleValidSubmit">
    <FluentValidationValidator />
    <ValidationSummary />

    <section class="panel panel-primary">
        <header class="panel-heading">
            <h5 class="panel-title">@PageLocalizer["EnterYourInformationPanelHeading"]</h5>
        </header>
        <div class="panel-body">
            <div class="form-group">
                <div class="form-control-wrapper">
                    <section>
                        <label class="form-control-label required" for="@nameof(model.CdnNumber)">
                            @PageLocalizer["CDNLabel"] <strong class="required">@CommonLocalizer["Required"]</strong>
                        </label>
                        <span tabindex="0" data-trigger="focus" data-toggle="popover" data-content="@PageLocalizer["CDNHint"]" data-title="" style="width:100px;">
                            <i class="fa fa-info-circle ml-2"></i>
                        </span>
                    </section>
                    <InputText class="form-control" @bind-Value="@model.CdnNumber" id="@nameof(model.CdnNumber)" placeholder="@PageLocalizer["CDNPlaceholder"]" />
                    <ValidationMessage For="() => model.CdnNumber" />
                </div>
                <div class="form-control-wrapper">
                    <section>
                        <label class="form-control-label required" for="@nameof(model.PhoneNumber)">
                            @PageLocalizer["PhoneNumberLabel"] <strong class="required">@CommonLocalizer["Required"]</strong>
                        </label>
                        <span tabindex="0" data-trigger="focus" data-toggle="popover" data-content="@PageLocalizer["PhoneNumberHint"]" data-title="" style="width:100px;">
                            <i class="fa fa-info-circle ml-2"></i>
                        </span>
                    </section>
                    <InputText class="form-control" @bind-Value="@model.PhoneNumber" id="@nameof(model.PhoneNumber)" type="tel" placeholder="@PageLocalizer["PhoneNumberPlaceholder"]" />
                    <ValidationMessage For="() => model.PhoneNumber" />
                </div>
                <div class="form-control-wrapper">
                    <section>
                        <label class="form-control-label required" for="@nameof(model.EmailAddress)">
                            @PageLocalizer["EmailAddressLabel"] <strong class="required">@CommonLocalizer["Required"]</strong>
                        </label>
                        <span tabindex="0" data-trigger="focus" data-toggle="popover" data-content="@PageLocalizer["EmailAddressHint"]" data-title="" style="width:100px;">
                            <i class="fa fa-info-circle ml-2"></i>
                        </span>
                    </section>
                    <InputText class="form-control" @bind-Value="@model.EmailAddress" id="@nameof(model.EmailAddress)" type="email" placeholder="@PageLocalizer["EmailAddressPlaceholder"]" />
                    <ValidationMessage For="() => model.EmailAddress" />
                </div>
            </div>
        </div>
    </section>

    <section class="panel panel-primary">
        <header class="panel-heading">
            <h5 class="panel-title">@PageLocalizer["SelectCertificatePanelHeading"]</h5>
        </header>

        <div class="panel-body">
            <div class="form-group">
                <div class="form-control-wrapper">
                    <section>
                        <label class="form-control-label required">
                            @PageLocalizer["SelectCertificateLabel"] <strong class="required">@CommonLocalizer["Required"]</strong>
                        </label>
                        <span tabindex="0" data-trigger="focus" data-toggle="popover" data-content="@PageLocalizer["SelectCertificateHint"]" data-title="" style="width:100px;">
                            <i class="fa fa-info-circle ml-2"></i>
                        </span>
                    </section>
                    <TSelect Items="@certificateTypes" FieldName="EnglishName" OnSelectChangeFromChildEvent="CertificateTypeSelectionChanged" />
                    <ValidationMessage For="() => model.CertificateType" />
                </div>
            </div>
        </div>

        <div class="panel-body">
            <div class="form-group">
                <div class="form-control-wrapper">
                    <section>
                        <label class="form-control-label">
                            @PageLocalizer["TypeOfCertificateLabel"] <strong class="required">@CommonLocalizer["Required"]</strong>
                        </label>
                        <span tabindex="0" data-trigger="focus" data-toggle="popover" data-content="@PageLocalizer["SelectCertificateHint"]" data-title="" style="width:100px;">
                            <i class="fa fa-info-circle ml-2"></i>
                        </span>

                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="@nameof(model.Renewing)" @onchange="RenewalSelectionChanged" id="renewal_1" value="@CorrespondenceRenewal.YES">
                            <label class="form-check-label" for="renewal_1">New certificate</label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" type="radio" name="@nameof(model.Renewing)" @onchange="RenewalSelectionChanged" id="renewal_2" value="@CorrespondenceRenewal.NO">
                            <label class="form-check-label" for="renewal_2">Renewal</label>
                        </div>
                    </section>
                </div>
            </div>
        </div>

    </section>

    <section class="panel panel-primary">
        <header class="panel-heading">
            <h5 class="panel-title">@PageLocalizer["AddYourDocumentsPanelHeading"]</h5>
        </header>
        <div class="panel-body">
            <div class="form-group">
                <div class="form-control-wrapper">
                    <label class="form-control-label required" for="@nameof(model.FileDescription)">
                        @PageLocalizer["FileDescriptionLabel"] <strong class="required">@CommonLocalizer["Required"]</strong>
                    </label>
                    <InputText class="form-control" @bind-Value="@model.FileDescription" id="@nameof(model.FileDescription)" placeholder="@PageLocalizer["FileDescriptionPlaceholder"]" />

                    <label class="required" for="@nameof(model.UploadedFiles)">
                        @PageLocalizer["SelectFileLabel"] <strong class="required">@CommonLocalizer["Required"]</strong>
                    </label>

                    <div class="form-row">

                        <div class="@((model.UploadedFiles != null && model.UploadedFiles.Any()? "col-md-3" : "col-md-2"))">
                            <button class="btn btn-primary btn-light" type="button" onclick="document.getElementById('@nameof(model.UploadedFiles)').click();">
                                @(!model.UploadedFiles.Any() ? @PageLocalizer["Browse"] : @PageLocalizer["AddAnotherDocument"])
                            </button>

                            <InputFile class="form-control" style="display:none;" OnChange="HandleFileSelected" id="@nameof(model.UploadedFiles)" accept=".jpg, .png, .gif, .pdf" />
                        </div>

                        <div class="@((model.UploadedFiles != null && model.UploadedFiles.Any()? "col-md-9" : "col-md-10"))">
                            <InputText class="form-control" disabled @bind-Value="@currentFileName" type="text" style="background-color: #ffffff; width:100%" />
                        </div>

                    </div>

                    <div>
                        @PageLocalizer["FilesAccepted"]
                    </div>

                    <br />

                    <div class="form-row">

                        @foreach (var file in model.UploadedFiles.AsEnumerable().Reverse())
                        {
                            <div class="alert @((file.Safe ? "alert-success" : "alert-danger"))" role="alert" style=" width: 100%; margin-right: 5px; margin-left: 5px;">
                                <h4 class="alert-heading">@((file.Safe) ? @PageLocalizer["DocumentSuccess"] : @PageLocalizer["DocumentError"] )</h4>

                                <p class="mb-4">
                                    @PageLocalizer["DocumentType"]: @file.Description
                                </p>

                                <p>
                                    @PageCommonLocalizer["Document"]: @file.SelectedFile.Name
                                </p>

                            </div>
                        }

                    </div>

                    <ValidationMessage For="() => model.UploadedFiles" />

                </div>
            </div>
        </div>
    </section>

    <input type="submit" class="btn btn-primary" value="@PageLocalizer["Next"]" />

    <a class=" btn btn-secondary" href="@previousLink">
        @CommonLocalizer["Previous"]
    </a>

</EditForm>

@code {

    private BaseStepper stepper = new BaseStepper();

    private string previousLink => String.Format("{0}{1}", NavigationManager.BaseUri, LanguageCode);

    private List<CertificateType> certificateTypes = new List<CertificateType>();

    private UploadDocumentPageModel model = new UploadDocumentPageModel();

    private string currentFileName = "";

    private string currentFileDescription = "";


    bool success = false;

    private void HandleValidSubmit()
    {

        state.UploadDocumentPage = model;

        NavigationManager.NavigateTo($"{NavigationManager.BaseUri}{LanguageCode}/review");
    }

    void RenewalSelectionChanged(ChangeEventArgs args)
    {

        Enum.TryParse(args.Value.ToString(), out CorrespondenceRenewal result);

        model.Renewing = result;

    }

    private void HandlePreviousClick()
    {
        NavigationManager.NavigateTo($"{NavigationManager.BaseUri}{LanguageCode}");
    }

    private async Task HandleFileSelected(IFileListEntry[] files)
    {

        if (string.IsNullOrWhiteSpace(model.FileDescription))
        {
            return;
        }

        var file = files.FirstOrDefault();

        if (file != null)
        {
            if (!ExtensionIsValid(file.Name))
            {
                return;
            }

            var memoryStream = new System.IO.MemoryStream();
            await file.Data.CopyToAsync(memoryStream);


            var fileToUpload = new UploadedFile { SelectedFile = file, Description = model.FileDescription, SelectedFileWithMemoryData = new FileListEntryImplExtension(memoryStream) };

            // uploadedFile will have Mtoa file attachment ID for the later retrieval.
            var uploadedMtoaAttachment = fileService.UploadSingleFileFromPage(fileToUpload);

            if (uploadedMtoaAttachment.Id > 0)
            {
                fileToUpload.Safe = true;
            }
            else
            {
                fileToUpload.Safe = false;
            }

            currentFileName = file.Name;
            currentFileDescription = model.FileDescription;

            model.UploadedFiles.Add(fileToUpload);
            model.FileDescription = string.Empty;
        }


        StateHasChanged();

    }

    private void CertificateTypeSelectionChanged(ChangeEventArgs e)
    {
        model.CertificateType = e.Value.ToString();
    }

    bool ExtensionIsValid(string path)
    {

        string ext = System.IO.Path.GetExtension(path);

        if (string.Equals(".jpg", ext, StringComparison.OrdinalIgnoreCase) ||
            string.Equals(".png", ext, StringComparison.OrdinalIgnoreCase) ||
            string.Equals(".gif", ext, StringComparison.OrdinalIgnoreCase) ||
            string.Equals(".pdf", ext, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        return false;
    }

    void RemoveFile(int index)
    {
        model.UploadedFiles.RemoveAt(index);

        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        this.UploadDocumentsStepper.Stepper.ActivateStepAtIndex(0);

        if (state.UploadDocumentPage != null)
        {
            model = state.UploadDocumentPage;

            StateHasChanged();
        }

        certificateTypes = CertificateType.GetAllCertificateTypes();

        currentFileName = PageLocalizer["FileNamePlaceholder"];
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        await JSRuntime.InvokeVoidAsync("initPopover").ConfigureAwait(false);
    }

}
