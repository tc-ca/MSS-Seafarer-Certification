@page "/upload"
@page "/{LanguageCode}/upload"

@inject IStringLocalizer<Common> CommonLocalizer
@inject IStringLocalizer<UploadDocument> PageLocalizer
@inject NavigationManager MyNavigationManager  

@using BlazorInputFile
@using CDNApplication.Data.Entity
@using CDNApplication.Models.PageModels
@inherits BaseComponent

<CDNApplication.TCComponents.Stepper.StepperComponent Stepper="@this.stepper" />

<h1>@PageLocalizer["PageTitle"]</h1>

<p>@PageLocalizer["PageDescription"]</p>

<p>Uri: @(MyNavigationManager.Uri.Split('/')[MyNavigationManager.Uri.Split('/').Length - 1])</p>

<EditForm Model="@_model" OnValidSubmit="HandleValidSubmit">
    <FluentValidationValidator />

    <ValidationSummary />



    <div class="form-group">
        <div class="form-control-wrapper">
            <label class="form-control-label required" for="@nameof(_model.CdnNumber)">
                @PageLocalizer["CDNLabel"] <strong class="required">@CommonLocalizer["Required"]</strong>
            </label>
            <InputText class="form-control" @bind-Value="@_model.CdnNumber" id="@nameof(_model.CdnNumber)" />

            <ValidationMessage For="() => _model.CdnNumber" />

        </div>
    </div>

    <div class="form-group">
        <div class="form-control-wrapper">
            <label class="form-control-label required">
                @PageLocalizer["SelectCertificateLabel"] <strong class="required">@CommonLocalizer["Required"]</strong>
            </label>
            <TSelect Items="@_certificateTypes" FieldName="EnglishName" OnSelectChangeFromChildEvent="CertificateTypeSelectionChanged" />

            <ValidationMessage For="() => _model.CertificateType" />

        </div>
    </div>

    <section class="panel panel-primary">
        <header class="panel-heading">
            <h5 class="panel-title">@PageLocalizer["AddYourDocumentsPanelHeading"]</h5>
        </header>
        <div class="panel-body">
            <div class="form-group">
                <label class="form-control-label required" for="@nameof(_model.FileDescription)">
                    @PageLocalizer["FileDescriptionLabel"] <strong class="required">@CommonLocalizer["Required"]</strong>
                </label>
                <InputText class="form-control" @bind-Value="@_model.FileDescription" id="@nameof(_model.FileDescription)" />



                <label class="required" for="@nameof(_model.UploadedFiles)">
                    @PageLocalizer["SelectFileLabel"] <strong class="required">@CommonLocalizer["Required"]</strong>
                </label>
                <InputFile class="form-control" OnChange="HandleFileSelected" id="@nameof(_model.UploadedFiles)" />

                <ValidationMessage For="() => _model.UploadedFiles" />



                @for (var i = 0; i < (_model.UploadedFiles?.Count ?? 0); i++)
                {
                    var index = i;
                    <p>
                        @string.Format(PageLocalizer["FileUploadedSuccessText"], _model.UploadedFiles?[i].SelectedFile.Name) | @PageLocalizer["DescriptionText"]: @_model.UploadedFiles?[i].Description

                        <button class="btn btn-danger" type="button" @onclick="e => RemoveFile(index)">X</button>
                    </p>
                }
                <br />

                <button id="add_another_file" type="button" class=" btn" onclick="trigerInputFileButton()">@PageLocalizer["AddAnotherFileText"]</button>

            </div>
        </div>
    </section>

    <button class=" btn btn-primary" type="submit">
        @CommonLocalizer["SubmitButton"]
    </button>

</EditForm>

@code {

    private CDNApplication.TCComponents.Stepper.BaseStepper stepper = new CDNApplication.TCComponents.Stepper.BaseStepper();
    private List<CertificateType> _certificateTypes = new List<CertificateType>();
    private int _confirmationGuid;
    private readonly UploadDocumentPageModel _model = new UploadDocumentPageModel();


    private void HandleValidSubmit()
    {
        Console.WriteLine("HandleValidSubmit");
        Console.WriteLine(_model);
        NavigationManager.NavigateTo($"{NavigationManager.BaseUri}{LanguageCode}/confirmation/{_confirmationGuid}");
    }

    async void HandleFileSelected(IFileListEntry[] files)
    {
        foreach (var item in files)
        {
            _model.UploadedFiles.Add(new UploadedFile { SelectedFile = item, Description = _model.FileDescription });

            _model.FileDescription = string.Empty;
        }

        StateHasChanged();

        await Task.Delay(100);
    }

    private void CertificateTypeSelectionChanged(ChangeEventArgs e)
    {
        _model.CertificateType = e.Value.ToString();
    }

    void RemoveFile(int index)
    {
        _model.UploadedFiles.RemoveAt(index);

        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _confirmationGuid = new Random().Next(100000, 9999999);

        _certificateTypes = CertificateType.GetAllCertificateTypes();

        var step1 = new CDNApplication.TCComponents.Stepper.BaseStep
        {
            Text = CommonLocalizer["DocumentUpload_Step1"],
            Index = 0,
            IsComplete = false,
            IsActive = true
        };
        var step2 = new CDNApplication.TCComponents.Stepper.BaseStep
        {
            Text = CommonLocalizer["DocumentUpload_Step2"],
            Index = 1,
            IsComplete = false,
            IsActive = false
        };
        var step3 = new CDNApplication.TCComponents.Stepper.BaseStep
        {
            Text = CommonLocalizer["DocumentUpload_Step3"],
            Index = 2,
            IsComplete = false,
            IsActive = false
        };

        stepper.AddStep(step1);
        stepper.AddStep(step2);
        stepper.AddStep(step3);
    }

}
