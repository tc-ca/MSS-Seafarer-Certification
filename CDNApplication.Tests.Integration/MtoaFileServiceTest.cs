// <auto-generated>
// added auto-generated to suppress the warning we will visit this part later.
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Text;
using System;
using System.Collections.Generic;
using System.Text;
using System;
using System.IO;
using System.Text;
using CDNApplication.Data.Services;
using CDNApplication.Tests.Integration.Services;
using Microsoft.AspNetCore.Http;
using Xunit;
using CDNApplication.Models.PageModels;
using CDNApplication.Data.DTO.MTAPI;
using BlazorInputFile;
using Microsoft.AspNetCore.SignalR.Protocol;
using System.Threading.Tasks;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Net;
using System.Diagnostics;

namespace CDNApplication.Tests.Integration
{
    public class MtoaFileServiceTest
    {
        [Fact]
        public void MtoaFileServiceMethodTest()
        {
            byte[] bytes = { 1, 2, 3, 4, 0xBA, 0xDF, 0x00, 0x0D };
            int serviceRequestId = 13844; //13844 is for Dev. For Kanga use  15703


            var fileAttachment = new FileAttachment
            {
                ContentType = "testing",
                Data = bytes,
                Name = "FirstName.txt",
                ServiceRequestId = serviceRequestId,
                Size = bytes.Length
            };

             
            var azureKeyVaultService = InitializeServices.GetAzureKeyVaultService();
            MtoaFileService fileService = new MtoaFileService(azureKeyVaultService);

            var attachment = fileService.UploadFile(serviceRequestId, fileAttachment).GetAwaiter().GetResult();


            bool isSuccess = false;
            if (attachment.Id > 0)
            {
                isSuccess = true;
            }
            else
            {
                isSuccess = false;
            }


            Assert.True(isSuccess);
        }

        [Fact]
        public void MtoaFileServiceApiCleanDataTest()
        {
            byte[] bytes = { 1, 2, 3, 4, 0xBA, 0xDF, 0x00, 0x0D };
            int serviceRequestId = 13844; //13844 is for Dev.


            var fileAttachment = new FileAttachment
            {
                ContentType = "testing",
                Data = bytes,
                Name = "FirstName.txt",
                ServiceRequestId = serviceRequestId,
                Size = bytes.Length
            };

            var azureKeyVaultService = InitializeServices.GetAzureKeyVaultService();
            MtoaFileService fileService = new MtoaFileService(azureKeyVaultService);

            var attachment = fileService.UploadFile(serviceRequestId, fileAttachment).GetAwaiter().GetResult();

            var fileId = attachment.Id;


            Assert.True(fileId > 0);

        }

        [Fact]
        public void MtoaFileServiceApiInfectedDataTest()
        {

            #region Virus Test File

            // ☠☠☠☠ Virus test file START  ☠☠☠☠ EICAR: European Institute for Computer Antivirus Research
            byte[] bytes = null;
            using (var ms = new MemoryStream())
            {
                TextWriter tw = new StreamWriter(ms);
                tw.Write(@"X5O!P%@AP[4\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*");
                tw.Flush();
                ms.Position = 0;
                bytes = ms.ToArray();
            }
            ////////////// Virus test file END ///////////////


            #endregion--- bytes for virus--

            int serviceRequestId = 13844; //13844 is a temporary service request id for Dev.


            var fileAttachment = new FileAttachment
            {
                ContentType = "Visus",
                Data = bytes,
                Name = "FirstName.txt",
                ServiceRequestId = serviceRequestId,
                Size = bytes.Length
            };

            var azureKeyVaultService = InitializeServices.GetAzureKeyVaultService();
            MtoaFileService fileService = new MtoaFileService(azureKeyVaultService);

            var uploadedFile = fileService.UploadFile(serviceRequestId, fileAttachment).GetAwaiter().GetResult();

            bool isInfected = false;
            if(uploadedFile.Id < 0)
            {
                isInfected = true;
            }
            else
            {
                isInfected = false;
            }


            Assert.True( isInfected );

        }

    }
}
