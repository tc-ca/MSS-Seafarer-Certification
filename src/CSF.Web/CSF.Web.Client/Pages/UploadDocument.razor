@page "/upload"
@page "/{LanguageCode}/upload"

@inject IJSRuntime JSRuntime;
@inject IStringLocalizer<Common> CommonLocalizer
@inject IStringLocalizer<UploadDocument> PageLocalizer
@inject IStringLocalizer<Common> PageCommonLocalizer
@inject CSF.Web.Client.Services.UploadDocumentsStepper UploadDocumentsStepper
@inject CSF.Web.Client.Utilities.SessionState state
@inject CSF.Web.Client.Data.Services.MtoaFileService fileService
@inject CSF.Web.Client.Services.IMtoaServices mtoaService

@using BlazorInputFile
@using CSF.Web.Client.Data
@using CSF.Web.Client.Data.Entity
@using CSF.Web.Client.Models.PageModels
@using CSF.Web.Client.TCComponents.Stepper
@using CSF.Web.Client.Utilities
@using CSF.Web.Client.Data.DTO.MTAPI
@inherits BaseComponent

<StepperComponent Stepper="@UploadDocumentsStepper.Stepper" />

<h1>@PageLocalizer["PageTitle"]</h1>

<EditForm Model="@model" OnValidSubmit="HandleValidSubmit">
    <FluentValidationValidator />
    <ValidationSummary />
    <section class="panel panel-primary">
        <header class="panel-heading">
            <h5 class="panel-title">@PageLocalizer["EnterYourInformationPanelHeading"]</h5>
        </header>
        <div class="panel-body">
            <div class="form-group">
                <div class="form-control-wrapper">
                    <section>
                        <label class="form-control-label required" for="@nameof(model.CdnNumber)">
                            @PageLocalizer["CDNLabel"] <strong class="required">@CommonLocalizer["Required"]</strong>
                        </label>
                        <span tabindex="0" data-trigger="focus" data-toggle="popover" data-content="@PageLocalizer["CDNHint"]" data-title="" style="width:100px;">
                            <i class="fa fa-info-circle ml-2"></i>
                        </span>
                    </section>
                    <InputText class="form-control" @bind-Value="@model.CdnNumber" id="@nameof(model.CdnNumber)" placeholder="@PageLocalizer["CDNPlaceholder"]" />
                    <ValidationMessage For="() => model.CdnNumber" />
                </div>
                <div class="form-control-wrapper">
                    <section>
                        <label class="form-control-label required" for="@nameof(model.PhoneNumber)">
                            @PageLocalizer["PhoneNumberLabel"] <strong class="required">@CommonLocalizer["Required"]</strong>
                        </label>
                        <span tabindex="0" data-trigger="focus" data-toggle="popover" data-content="@PageLocalizer["PhoneNumberHint"]" data-title="" style="width:100px;">
                            <i class="fa fa-info-circle ml-2"></i>
                        </span>
                    </section>
                    <InputText class="form-control" @bind-Value="@model.PhoneNumber" id="@nameof(model.PhoneNumber)" type="tel" placeholder="@PageLocalizer["PhoneNumberPlaceholder"]" />
                    <ValidationMessage For="() => model.PhoneNumber" />
                </div>
                <div class="form-control-wrapper">
                    <section>
                        <label class="form-control-label required" for="@nameof(model.EmailAddress)">
                            @PageLocalizer["EmailAddressLabel"] <strong class="required">@CommonLocalizer["Required"]</strong>
                        </label>
                        <span tabindex="0" data-trigger="focus" data-toggle="popover" data-content="@PageLocalizer["EmailAddressHint"]" data-title="" style="width:100px;">
                            <i class="fa fa-info-circle ml-2"></i>
                        </span>
                    </section>
                    <InputText class="form-control" @bind-Value="@model.EmailAddress" id="@nameof(model.EmailAddress)" type="email" placeholder="@PageLocalizer["EmailAddressPlaceholder"]" />
                    <ValidationMessage For="() => model.EmailAddress" />
                </div>
            </div>
        </div>
    </section>

    <section class="panel panel-primary">
        <header class="panel-heading">
            <h5 class="panel-title">@PageLocalizer["SelectCertificatePanelHeading"]</h5>
        </header>

        <div class="panel-body">
            <div class="form-group">
                <div class="form-control-wrapper">
                    <section>
                        <label class="form-control-label required">
                            @PageLocalizer["SelectCertificateLabel"] <strong class="required">@CommonLocalizer["Required"]</strong>
                        </label>
                        <span tabindex="0" data-trigger="focus" data-toggle="popover" data-content="@PageLocalizer["SelectCertificateHint"]" data-title="" style="width:100px;">
                            <i class="fa fa-info-circle ml-2"></i>
                        </span>
                    </section>
                    <TSelect Items="@certificateTypes" FieldName="EnglishName" OnSelectChangeFromChildEvent="CertificateTypeSelectionChanged" />
                    <ValidationMessage For="() => model.CertificateType" />
                </div>
            </div>
            <div class="form-group">
                <div class="form-control-wrapper">
                    <section>
                        <label class="form-control-label required">
                            @PageLocalizer["TypeOfCertificateLabel"] <strong class="required">@CommonLocalizer["Required"]</strong>
                        </label>
                        <span tabindex="0" data-trigger="focus" data-toggle="popover" data-content="@PageLocalizer["SelectCertificateHint"]" data-title="" style="width:100px;">
                            <i class="fa fa-info-circle ml-2"></i>
                        </span>

                        @foreach (var submissionType in (SubmissionType[])Enum.GetValues(typeof(SubmissionType)))
                        {
                            var submissionTypeValue = submissionType.GetValue();
                            <div>
                                <label>
                                    <input type="radio"
                                           name="submissionType"
                                           checked="@(model.SubmissionType == submissionType)"
                                           @onchange="@(() => model.SubmissionType = submissionType)" />
                                    @CommonLocalizer[submissionTypeValue]
                                </label>
                            </div>
                        }
                        <ValidationMessage For="() => model.SubmissionType" />
                    </section>
                </div>
            </div>
        </div>

    </section>

    <section class="panel panel-primary">
        <header class="panel-heading">
            <h5 class="panel-title">@PageLocalizer["AddYourDocumentsPanelHeading"]</h5>
        </header>
        <div class="panel-body">
            <div class="form-group">
                <div class="form-control-wrapper">
                    <label class="required" for="@nameof(model.UploadedFiles)">
                        @PageLocalizer["SelectFileLabel"] <strong class="required">@CommonLocalizer["Required"]</strong>
                    </label>

                    <div class="form-row">

                        <div class="input-group" onclick="document.getElementById('@nameof(model.UploadedFiles)').click();">
                            <span class="input-group-btn">
                                <button class="btn btn-default" type="button">Browse</button>
                            </span>
                            <input type="text" class="form-control" placeholder="@currentFileName" disabled>
                        </div>
                        <BlazorInputFile.InputFile class="form-control" style="display:none;" OnChange="HandleFileSelected" id="@nameof(model.UploadedFiles)" accept=".jpg, .png, .gif, .pdf" />

                    </div>

                    <div>
                        @PageLocalizer["FilesAccepted"]
                    </div>

                    <br />

                    <ValidationMessage For="() => model.UploadedFiles" />

                    @foreach (var documentError in this.DocumentErrors)
                    {
                        <div class="alert document-alert-danger alert-dismissible" role="alert">
                            <svg style="margin:0;">
                                <circle cx="10" cy="10" r="10" fill="#D3080C" />
                            </svg>
                            <div style="flex-grow:2">
                                <b>@documentError.ErrorMessage</b> <br /><br />
                                <b>@documentError.FileName</b> (@documentError.FileBytesLength.ToString() bytes)
                            </div>
                            <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        </div>
                    }

                    <section class="documents-section">
                        <div class="row row-header">
                            <div class="col-md-5">
                                @PageLocalizer["DocumentSuccessfullyAdded"]
                            </div>
                            <div class="col-md-5">
                                <strong class="required">*</strong>@PageLocalizer["IdentifyYourDocumentType"]<strong class="required">@CommonLocalizer["Required"]</strong>
                            </div>
                            <div class="col-md-2">
                                @CommonLocalizer["Delete"]
                            </div>
                        </div>

                        @foreach (var file in model.UploadedFiles.AsEnumerable().Reverse())
                        {
                            <div class="row row-data">
                                <div class="col-md-5">
                                    @file.SelectedFile.Name
                                </div>
                                <div class="col-md-5">
                                    <div>
                                        <InputText class="form-control" @bind-Value="@file.Description" id="@file.ToString()" />
                                        <ValidationMessage For="() => file.Description" />
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <button type="button" class="btn trash" @onclick="e => RemoveFile(file)">
                                        <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-trash" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                                            <path d="M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z" />
                                            <path fill-rule="evenodd" d="M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z" />
                                        </svg>
                                    </button>
                                </div>
                            </div>
                        }

                    </section>

                </div><br>
                <div id="reCapture_element"></div>
                <ValidationMessage For="() => model.NotRobot" />
            </div>
        </div>
    </section>

    <input type="submit" class="btn btn-primary" value="@PageLocalizer["Next"]" />

    <a class=" btn btn-secondary" href="@previousLink">
        @CommonLocalizer["Previous"]
    </a>

</EditForm>

@code {

    class DocumentError
    {
        public string FileName { get; set; }
        public double FileBytesLength { get; set; }
        public string ErrorMessage { get; set; }
    }

    private List<DocumentError> DocumentErrors = new List<DocumentError>();

    private BaseStepper stepper = new BaseStepper();

    private string previousLink => String.Format("{0}{1}", NavigationManager.BaseUri, LanguageCode);

    private List<CertificateType> certificateTypes = new List<CertificateType>();

    private UploadDocumentPageModel model = new UploadDocumentPageModel();

    private string currentFileName = "";

    private int length = 0;

    private int reCaptchaCheded = -9;

    bool success = false;

    private async Task HandleValidSubmit()
    {
        state.UploadDocumentPage = model;

        NavigationManager.NavigateTo($"{NavigationManager.BaseUri}{LanguageCode}/review");
    }

    private void HandlePreviousClick()
    {
        NavigationManager.NavigateTo($"{NavigationManager.BaseUri}{LanguageCode}");
    }

    private async Task HandleFileSelected(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();

        if (file != null)
        {
            if (!ExtensionIsValid(file.Name))
            {
                var documentError = new DocumentError()
                {
                    FileName = file.Name,
                    FileBytesLength = file.Size,
                    ErrorMessage = PageLocalizer["DocumentFileExtensionInvalid"],
                };
                this.DocumentErrors.Add(documentError);
                StateHasChanged();
                return;
            }

            if (file.Size >= 200000000)
            {
                var documentError = new DocumentError()
                {
                    FileName = file.Name,
                    FileBytesLength = file.Size,
                    ErrorMessage = PageLocalizer["DocumentFileSizeTooBigError"],
                };
                this.DocumentErrors.Add(documentError);
                StateHasChanged();
                return;
            }

            var memoryStream = new System.IO.MemoryStream();
            await file.Data.CopyToAsync(memoryStream);


            var fileToUpload = new UploadedFile { SelectedFile = file, SelectedFileWithMemoryData = new MemoryStreamFileListEntryImpl(memoryStream) };


            // uploadedFile will have Mtoa file attachment ID for the later retrieval.
            var fileToUploadToMtoa = new FileAttachment()
            {
                Name = fileToUpload.SelectedFile.Name,
                Data = fileToUpload.SelectedFileWithMemoryData.MemoryStreamData.ToArray(),
                ServiceRequestId = this.model.MtoaServiceRequestId,
                Size = fileToUpload.SelectedFileWithMemoryData.MemoryStreamData.ToArray().Length
            };


        var uploadedMtoaAttachment = fileService.UploadFile(model.MtoaServiceRequestId, fileToUploadToMtoa);
            if (uploadedMtoaAttachment.Id > 0)
            {
                fileToUpload.Safe = true;
            }
            else
            {
                fileToUpload.Safe = false;
            }

            currentFileName = file.Name;

            model.UploadedFiles.Add(fileToUpload);

            length = model.UploadedFiles.Count;
        }


        StateHasChanged();

    }

    private void CertificateTypeSelectionChanged(ChangeEventArgs e)
    {
        model.CertificateType = e.Value.ToString();
    }

    bool ExtensionIsValid(string path)
    {

        string ext = System.IO.Path.GetExtension(path);

        if (string.Equals(".jpg", ext, StringComparison.OrdinalIgnoreCase) ||
            string.Equals(".png", ext, StringComparison.OrdinalIgnoreCase) ||
            string.Equals(".gif", ext, StringComparison.OrdinalIgnoreCase) ||
            string.Equals(".pdf", ext, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        return false;
    }

    void RemoveFile(int index)
    {
        model.UploadedFiles.RemoveAt(index);

        StateHasChanged();
    }

    void RemoveFile(UploadedFile file)
    {
        model.UploadedFiles.Remove(file);

        StateHasChanged();
    }


    protected override void OnInitialized()
    {
        base.OnInitialized();

        this.UploadDocumentsStepper.Stepper.ActivateStepAtIndex(0);

        if (state.UploadDocumentPage != null)
        {
            model = state.UploadDocumentPage;

            StateHasChanged();
        }

        certificateTypes = CertificateType.GetAllCertificateTypes();

        currentFileName = PageLocalizer["FileNamePlaceholder"];

        var serviceRequests = mtoaService.PostServiceRequests();
        model.MtoaServiceRequestId = serviceRequests.ServiceRequestId;
        model.ConfirmationNumber = model.MtoaServiceRequestId.ToString();
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        await JSRuntime.InvokeVoidAsync("initPopover").ConfigureAwait(false);
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("onloadCallback", DotNetObjectReference.Create(this));
        }

    }


    [JSInvokable]
    public void UpdateRecaptcha()
    {
        model.NotRobot = "YES";
    }

}
