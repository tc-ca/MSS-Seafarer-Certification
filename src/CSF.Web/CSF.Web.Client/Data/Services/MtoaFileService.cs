// <auto-generated>
// added auto-generated to suppress the warning we will visit this part later.
// </auto-generated>
using BlazorInputFile;
using CSF.Web.Client.Data.DTO.MTAPI;
using CSF.Web.Client.Exceptions;
using CSF.Web.Client.Models.PageModels;
using Microsoft.AspNetCore.WebUtilities;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Net.Security;
using System.Net.Sockets;
using System.Threading.Tasks;

namespace CSF.Web.Client.Data.Services
{
    public class MtoaFileService
    {

        private readonly string baseURL = "https://wwwappstest.tc.gc.ca/Saf-Sec-Sur/13/MTAPI-INT/api/v1/"; //This is for Dev only works within organizational network.

        private string api_key;
        private string jwt;

        public MtoaFileService(IKeyVaultService azureKeyVaultService)
        {
            api_key = azureKeyVaultService.GetSecretByName("MtoaApiKey");
            jwt = azureKeyVaultService.GetSecretByName("MtoaJwt");
        }

        public async Task<FileAttachment> UploadFile(int serviceRequestId, FileAttachment fileAttachment)
        {
            FileAttachment uploadedFileAttachment = null;


            using (var client = new HttpClient())
            {

                client.DefaultRequestHeaders.TryAddWithoutValidation("Accept", "application/json");
                client.DefaultRequestHeaders.TryAddWithoutValidation("app-jwt", this.jwt);
                client.DefaultRequestHeaders.TryAddWithoutValidation("api-key", this.api_key);

                client.BaseAddress = new Uri(this.baseURL);
                
                ByteArrayContent content = new ByteArrayContent(fileAttachment.Data);
                content.Headers.ContentType = new MediaTypeHeaderValue("application/octet-stream");

                string subUrl = "file-attachments?serviceRequestId=" + serviceRequestId +
                                "&filename=" + fileAttachment.EscapedName +
                                "&contentType=application/octet-stream&size=" + fileAttachment.Size;

                try
                {
                    System.Net.ServicePointManager.SecurityProtocol =  SecurityProtocolType.Tls12  ;
                    System.Net.ServicePointManager.Expect100Continue = false;

                    HttpResponseMessage response = client.PostAsync(subUrl, (HttpContent)content).GetAwaiter().GetResult();

                    if (response.StatusCode == HttpStatusCode.OK)
                    {
                        uploadedFileAttachment = await (Task<FileAttachment>)HttpContentExtensions.ReadAsAsync<FileAttachment>(response.Content);
                    }

                    if (response.StatusCode == HttpStatusCode.BadRequest)
                    {
                        uploadedFileAttachment = await (Task<FileAttachment>)HttpContentExtensions.ReadAsAsync<FileAttachment>(response.Content);
                        uploadedFileAttachment.Name = fileAttachment.Name;
                        uploadedFileAttachment.Id = -1;
                    }

                    response.EnsureSuccessStatusCode();
                    var status = response.StatusCode;
                }
                catch(WebException ex)
                {
                    Debug.WriteLine(ex.Message);
                    Debug.WriteLine(ex.InnerException);
                    Debug.WriteLine(ex.StackTrace);
                }
                catch (HttpRequestException socketException)
                {
                    Debug.WriteLine(socketException.Message);
                    Debug.WriteLine(socketException.InnerException);
                    Debug.WriteLine(socketException.StackTrace);
                    throw new MtoaConnectionException("Unable to connect to MTOA services.", socketException);
                }
                catch (Exception ex)
                {
                    Debug.WriteLine(ex.Message);
                    Debug.WriteLine(ex.InnerException);
                    Debug.WriteLine(ex.StackTrace);
                }

                return uploadedFileAttachment;
            }


        } 
    }
}
